# ---
# - name: Debug
#   debug:
#     msg: "{{config.instance_name}}"
#
---
- name: Create a security group
  ec2_group:
    name: ansible
    description: "Ansible Security Group"
    vpc_id: "{{vpc_id}}"
    region: "{{aws_region}}"
    aws_access_key: "{{aws_access_key}}"
    aws_secret_key: "{{aws_secret_key}}"
    rules:
      - proto: all
        cidr_ip: 0.0.0.0/0
        cidr_ipv6: ::/0
      - proto: all
        group_name: ansible
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
        cidr_ipv6: ::/0
  register: firewall

# - name: Create an EC2 instance
#   ec2:
#     aws_access_key: "{{aws_access_key}}"
#     aws_secret_key: "{{aws_secret_key}}"
#     key_name: "{{key_name}}"
#     region: "{{aws_region}}"
#     group_id: "{{firewall.group_id}}"
#     instance_type: "{{config.instance_type}}"
#     image: "{{ami_id}}"
#     wait: yes
#     volumes:
#       - device_name: /dev/sda1
#         volume_type: gp2
#         volume_size: 32
#         delete_on_termination: true
#     exact_count: 1
#     count_tag:
#       Name: "{{config.instance_name}}"
#     instance_tags:
#       Name: "{{config.instance_name}}"
#     state: present
#   register: ec2
# - debug: var=ec2

- name: start an instance with a public IP address
  community.aws.ec2_instance:
    name: "{{config.instance_name}}"
    volumes:
      - device_name: /dev/sda1
        ebs:
          volume_size: 64
          delete_on_termination: true
    aws_access_key: "{{aws_access_key}}"
    aws_secret_key: "{{aws_secret_key}}"
    region: "{{aws_region}}"
    key_name: "{{key_name}}"
    instance_type: "{{config.instance_type}}"
    security_group: default
    image_id: "{{ami_id}}"
  register: ec2
- debug: var=ec2

- name: allocate a new elastic IP without associating it to anything
  community.aws.ec2_eip:
    region: "{{aws_region}}"
    state: present
    in_vpc: true
  register: eip
- debug: var=eip

- name: associate an elastic IP with an instance
  community.aws.ec2_eip:
    region: "{{aws_region}}"
    device_id: "{{ ec2.instances[0].instance_id }}"
    public_ip: "{{ eip.public_ip }}"
  register: instance_eip
- debug: var=instance_eip

- name: Wait for SSH to come up
  local_action: wait_for
    host={{ eip.public_ip }}
    port=22
    state=started
  with_items: "{{ec2.instances}}"

- name: Add a host alias that we reach through a tunnel (Ansible >= 2.0)
  add_host:
    name: "{{ config.instance_name }}.{{ config.domain }}"
    hostname: "zion"
    groups: relays
    ansible_host: "{{ eip.public_ip }}"
    ansible_connection: "ssh"
    ansible_user: "ubuntu"
    ansible_ssh_private_key_file: "~/.ssh/box"
    ansible_python_interpreter: "/usr/bin/python3"
    ec2: "{{ ec2 }}"
    public_ip: "{{ eip.public_ip }}"
    testnet: "{{ config.testnet }}"
    domain: "{{ config.domain }}"
    scheme: "{{ config.scheme }}"
    alias: "{{ config.alias }}"

- name: Add to Route 53
  community.aws.route53:
    state: present
    zone: "{{ config.domain }}"
    record: "{{ config.instance_name }}.{{ config.domain }}"
    type: A
    ttl: 300
    value: "{{ instance_eip.public_ip }}"
    overwrite: yes
    wait: yes

- name: Write the new ec2 instance host key to known hosts
  connection: local
  shell: "ssh-keyscan -H {{ instance_eip.public_ip }} >> ~/.ssh/known_hosts"

- name: Timeout
  pause:
    seconds: 10
